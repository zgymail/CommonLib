// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "SwAnimation.pb.h"
// @@protoc_insertion_point(imports)

@implementation SwAnimationRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [SwAnimationRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [SwFrameRoot registerAllExtensions:registry];
    [SignRectangleRoot registerAllExtensions:registry];
    [ParaRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface SwAnimation ()
@property (strong) NSString* name;
@property UInt32 frameCount;
@property UInt32 timeCount;
@property (strong) NSMutableArray * framesArray;
@property (strong) NSMutableArray * signRectanglesArray;
@property (strong) NSMutableArray * parasArray;
@property SInt32 width;
@property SInt32 height;
@property SInt32 scaleX;
@property SInt32 scaleY;
@property (strong) NSMutableArray * compsiteAnimationsArray;
@end

@implementation SwAnimation

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasFrameCount {
  return !!hasFrameCount_;
}
- (void) setHasFrameCount:(BOOL) _value_ {
  hasFrameCount_ = !!_value_;
}
@synthesize frameCount;
- (BOOL) hasTimeCount {
  return !!hasTimeCount_;
}
- (void) setHasTimeCount:(BOOL) _value_ {
  hasTimeCount_ = !!_value_;
}
@synthesize timeCount;
@synthesize framesArray;
@dynamic frames;
@synthesize signRectanglesArray;
@dynamic signRectangles;
@synthesize parasArray;
@dynamic paras;
- (BOOL) hasWidth {
  return !!hasWidth_;
}
- (void) setHasWidth:(BOOL) _value_ {
  hasWidth_ = !!_value_;
}
@synthesize width;
- (BOOL) hasHeight {
  return !!hasHeight_;
}
- (void) setHasHeight:(BOOL) _value_ {
  hasHeight_ = !!_value_;
}
@synthesize height;
- (BOOL) hasScaleX {
  return !!hasScaleX_;
}
- (void) setHasScaleX:(BOOL) _value_ {
  hasScaleX_ = !!_value_;
}
@synthesize scaleX;
- (BOOL) hasScaleY {
  return !!hasScaleY_;
}
- (void) setHasScaleY:(BOOL) _value_ {
  hasScaleY_ = !!_value_;
}
@synthesize scaleY;
@synthesize compsiteAnimationsArray;
@dynamic compsiteAnimations;
- (instancetype) init {
  if ((self = [super init])) {
    self.name = @"";
    self.frameCount = 0;
    self.timeCount = 0;
    self.width = 0;
    self.height = 0;
    self.scaleX = 100;
    self.scaleY = 100;
  }
  return self;
}
static SwAnimation* defaultSwAnimationInstance = nil;
+ (void) initialize {
  if (self == [SwAnimation class]) {
    defaultSwAnimationInstance = [[SwAnimation alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSwAnimationInstance;
}
- (instancetype) defaultInstance {
  return defaultSwAnimationInstance;
}
- (NSArray *)frames {
  return framesArray;
}
- (SwFrame*)framesAtIndex:(NSUInteger)index {
  return [framesArray objectAtIndex:index];
}
- (NSArray *)signRectangles {
  return signRectanglesArray;
}
- (SignRectangle*)signRectanglesAtIndex:(NSUInteger)index {
  return [signRectanglesArray objectAtIndex:index];
}
- (NSArray *)paras {
  return parasArray;
}
- (Para*)parasAtIndex:(NSUInteger)index {
  return [parasArray objectAtIndex:index];
}
- (NSArray *)compsiteAnimations {
  return compsiteAnimationsArray;
}
- (SwCompsiteAnimation*)compsiteAnimationsAtIndex:(NSUInteger)index {
  return [compsiteAnimationsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasName) {
    return NO;
  }
  if (!self.hasFrameCount) {
    return NO;
  }
  if (!self.hasTimeCount) {
    return NO;
  }
  __block BOOL isInitsignRectangles = YES;
   [self.signRectangles enumerateObjectsUsingBlock:^(SignRectangle *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitsignRectangles = NO;
      *stop = YES;
    }
  }];
  if (!isInitsignRectangles) return isInitsignRectangles;
  __block BOOL isInitparas = YES;
   [self.paras enumerateObjectsUsingBlock:^(Para *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitparas = NO;
      *stop = YES;
    }
  }];
  if (!isInitparas) return isInitparas;
  __block BOOL isInitcompsiteAnimations = YES;
   [self.compsiteAnimations enumerateObjectsUsingBlock:^(SwCompsiteAnimation *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitcompsiteAnimations = NO;
      *stop = YES;
    }
  }];
  if (!isInitcompsiteAnimations) return isInitcompsiteAnimations;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasFrameCount) {
    [output writeUInt32:2 value:self.frameCount];
  }
  if (self.hasTimeCount) {
    [output writeUInt32:3 value:self.timeCount];
  }
  [self.framesArray enumerateObjectsUsingBlock:^(SwFrame *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:4 value:element];
  }];
  [self.signRectanglesArray enumerateObjectsUsingBlock:^(SignRectangle *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  [self.parasArray enumerateObjectsUsingBlock:^(Para *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:6 value:element];
  }];
  if (self.hasWidth) {
    [output writeInt32:7 value:self.width];
  }
  if (self.hasHeight) {
    [output writeInt32:8 value:self.height];
  }
  if (self.hasScaleX) {
    [output writeInt32:9 value:self.scaleX];
  }
  if (self.hasScaleY) {
    [output writeInt32:10 value:self.scaleY];
  }
  [self.compsiteAnimationsArray enumerateObjectsUsingBlock:^(SwCompsiteAnimation *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:11 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  if (self.hasFrameCount) {
    size_ += computeUInt32Size(2, self.frameCount);
  }
  if (self.hasTimeCount) {
    size_ += computeUInt32Size(3, self.timeCount);
  }
  [self.framesArray enumerateObjectsUsingBlock:^(SwFrame *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(4, element);
  }];
  [self.signRectanglesArray enumerateObjectsUsingBlock:^(SignRectangle *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  [self.parasArray enumerateObjectsUsingBlock:^(Para *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(6, element);
  }];
  if (self.hasWidth) {
    size_ += computeInt32Size(7, self.width);
  }
  if (self.hasHeight) {
    size_ += computeInt32Size(8, self.height);
  }
  if (self.hasScaleX) {
    size_ += computeInt32Size(9, self.scaleX);
  }
  if (self.hasScaleY) {
    size_ += computeInt32Size(10, self.scaleY);
  }
  [self.compsiteAnimationsArray enumerateObjectsUsingBlock:^(SwCompsiteAnimation *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(11, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SwAnimation*) parseFromData:(NSData*) data {
  return (SwAnimation*)[[[SwAnimation builder] mergeFromData:data] build];
}
+ (SwAnimation*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SwAnimation*)[[[SwAnimation builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SwAnimation*) parseFromInputStream:(NSInputStream*) input {
  return (SwAnimation*)[[[SwAnimation builder] mergeFromInputStream:input] build];
}
+ (SwAnimation*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SwAnimation*)[[[SwAnimation builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SwAnimation*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SwAnimation*)[[[SwAnimation builder] mergeFromCodedInputStream:input] build];
}
+ (SwAnimation*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SwAnimation*)[[[SwAnimation builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SwAnimationBuilder*) builder {
  return [[SwAnimationBuilder alloc] init];
}
+ (SwAnimationBuilder*) builderWithPrototype:(SwAnimation*) prototype {
  return [[SwAnimation builder] mergeFrom:prototype];
}
- (SwAnimationBuilder*) builder {
  return [SwAnimation builder];
}
- (SwAnimationBuilder*) toBuilder {
  return [SwAnimation builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasFrameCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"frameCount", [NSNumber numberWithInteger:self.frameCount]];
  }
  if (self.hasTimeCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timeCount", [NSNumber numberWithInteger:self.timeCount]];
  }
  [self.framesArray enumerateObjectsUsingBlock:^(SwFrame *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"frames"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.signRectanglesArray enumerateObjectsUsingBlock:^(SignRectangle *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"signRectangles"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.parasArray enumerateObjectsUsingBlock:^(Para *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"paras"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasWidth) {
    [output appendFormat:@"%@%@: %@\n", indent, @"width", [NSNumber numberWithInteger:self.width]];
  }
  if (self.hasHeight) {
    [output appendFormat:@"%@%@: %@\n", indent, @"height", [NSNumber numberWithInteger:self.height]];
  }
  if (self.hasScaleX) {
    [output appendFormat:@"%@%@: %@\n", indent, @"scaleX", [NSNumber numberWithInteger:self.scaleX]];
  }
  if (self.hasScaleY) {
    [output appendFormat:@"%@%@: %@\n", indent, @"scaleY", [NSNumber numberWithInteger:self.scaleY]];
  }
  [self.compsiteAnimationsArray enumerateObjectsUsingBlock:^(SwCompsiteAnimation *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"compsiteAnimations"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasFrameCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.frameCount] forKey: @"frameCount"];
  }
  if (self.hasTimeCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.timeCount] forKey: @"timeCount"];
  }
  for (SwFrame* element in self.framesArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"frames"];
  }
  for (SignRectangle* element in self.signRectanglesArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"signRectangles"];
  }
  for (Para* element in self.parasArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"paras"];
  }
  if (self.hasWidth) {
    [dictionary setObject: [NSNumber numberWithInteger:self.width] forKey: @"width"];
  }
  if (self.hasHeight) {
    [dictionary setObject: [NSNumber numberWithInteger:self.height] forKey: @"height"];
  }
  if (self.hasScaleX) {
    [dictionary setObject: [NSNumber numberWithInteger:self.scaleX] forKey: @"scaleX"];
  }
  if (self.hasScaleY) {
    [dictionary setObject: [NSNumber numberWithInteger:self.scaleY] forKey: @"scaleY"];
  }
  for (SwCompsiteAnimation* element in self.compsiteAnimationsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"compsiteAnimations"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SwAnimation class]]) {
    return NO;
  }
  SwAnimation *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasFrameCount == otherMessage.hasFrameCount &&
      (!self.hasFrameCount || self.frameCount == otherMessage.frameCount) &&
      self.hasTimeCount == otherMessage.hasTimeCount &&
      (!self.hasTimeCount || self.timeCount == otherMessage.timeCount) &&
      [self.framesArray isEqualToArray:otherMessage.framesArray] &&
      [self.signRectanglesArray isEqualToArray:otherMessage.signRectanglesArray] &&
      [self.parasArray isEqualToArray:otherMessage.parasArray] &&
      self.hasWidth == otherMessage.hasWidth &&
      (!self.hasWidth || self.width == otherMessage.width) &&
      self.hasHeight == otherMessage.hasHeight &&
      (!self.hasHeight || self.height == otherMessage.height) &&
      self.hasScaleX == otherMessage.hasScaleX &&
      (!self.hasScaleX || self.scaleX == otherMessage.scaleX) &&
      self.hasScaleY == otherMessage.hasScaleY &&
      (!self.hasScaleY || self.scaleY == otherMessage.scaleY) &&
      [self.compsiteAnimationsArray isEqualToArray:otherMessage.compsiteAnimationsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasFrameCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.frameCount] hash];
  }
  if (self.hasTimeCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.timeCount] hash];
  }
  [self.framesArray enumerateObjectsUsingBlock:^(SwFrame *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.signRectanglesArray enumerateObjectsUsingBlock:^(SignRectangle *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.parasArray enumerateObjectsUsingBlock:^(Para *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasWidth) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.width] hash];
  }
  if (self.hasHeight) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.height] hash];
  }
  if (self.hasScaleX) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.scaleX] hash];
  }
  if (self.hasScaleY) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.scaleY] hash];
  }
  [self.compsiteAnimationsArray enumerateObjectsUsingBlock:^(SwCompsiteAnimation *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SwAnimationBuilder()
@property (strong) SwAnimation* resultSwAnimation;
@end

@implementation SwAnimationBuilder
@synthesize resultSwAnimation;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSwAnimation = [[SwAnimation alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSwAnimation;
}
- (SwAnimationBuilder*) clear {
  self.resultSwAnimation = [[SwAnimation alloc] init];
  return self;
}
- (SwAnimationBuilder*) clone {
  return [SwAnimation builderWithPrototype:resultSwAnimation];
}
- (SwAnimation*) defaultInstance {
  return [SwAnimation defaultInstance];
}
- (SwAnimation*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SwAnimation*) buildPartial {
  SwAnimation* returnMe = resultSwAnimation;
  self.resultSwAnimation = nil;
  return returnMe;
}
- (SwAnimationBuilder*) mergeFrom:(SwAnimation*) other {
  if (other == [SwAnimation defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasFrameCount) {
    [self setFrameCount:other.frameCount];
  }
  if (other.hasTimeCount) {
    [self setTimeCount:other.timeCount];
  }
  if (other.framesArray.count > 0) {
    if (resultSwAnimation.framesArray == nil) {
      resultSwAnimation.framesArray = [[NSMutableArray alloc] initWithArray:other.framesArray];
    } else {
      [resultSwAnimation.framesArray addObjectsFromArray:other.framesArray];
    }
  }
  if (other.signRectanglesArray.count > 0) {
    if (resultSwAnimation.signRectanglesArray == nil) {
      resultSwAnimation.signRectanglesArray = [[NSMutableArray alloc] initWithArray:other.signRectanglesArray];
    } else {
      [resultSwAnimation.signRectanglesArray addObjectsFromArray:other.signRectanglesArray];
    }
  }
  if (other.parasArray.count > 0) {
    if (resultSwAnimation.parasArray == nil) {
      resultSwAnimation.parasArray = [[NSMutableArray alloc] initWithArray:other.parasArray];
    } else {
      [resultSwAnimation.parasArray addObjectsFromArray:other.parasArray];
    }
  }
  if (other.hasWidth) {
    [self setWidth:other.width];
  }
  if (other.hasHeight) {
    [self setHeight:other.height];
  }
  if (other.hasScaleX) {
    [self setScaleX:other.scaleX];
  }
  if (other.hasScaleY) {
    [self setScaleY:other.scaleY];
  }
  if (other.compsiteAnimationsArray.count > 0) {
    if (resultSwAnimation.compsiteAnimationsArray == nil) {
      resultSwAnimation.compsiteAnimationsArray = [[NSMutableArray alloc] initWithArray:other.compsiteAnimationsArray];
    } else {
      [resultSwAnimation.compsiteAnimationsArray addObjectsFromArray:other.compsiteAnimationsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SwAnimationBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SwAnimationBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 16: {
        [self setFrameCount:[input readUInt32]];
        break;
      }
      case 24: {
        [self setTimeCount:[input readUInt32]];
        break;
      }
      case 34: {
        SwFrameBuilder* subBuilder = [SwFrame builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addFrames:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        SignRectangleBuilder* subBuilder = [SignRectangle builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSignRectangles:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        ParaBuilder* subBuilder = [Para builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addParas:[subBuilder buildPartial]];
        break;
      }
      case 56: {
        [self setWidth:[input readInt32]];
        break;
      }
      case 64: {
        [self setHeight:[input readInt32]];
        break;
      }
      case 72: {
        [self setScaleX:[input readInt32]];
        break;
      }
      case 80: {
        [self setScaleY:[input readInt32]];
        break;
      }
      case 90: {
        SwCompsiteAnimationBuilder* subBuilder = [SwCompsiteAnimation builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCompsiteAnimations:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return resultSwAnimation.hasName;
}
- (NSString*) name {
  return resultSwAnimation.name;
}
- (SwAnimationBuilder*) setName:(NSString*) value {
  resultSwAnimation.hasName = YES;
  resultSwAnimation.name = value;
  return self;
}
- (SwAnimationBuilder*) clearName {
  resultSwAnimation.hasName = NO;
  resultSwAnimation.name = @"";
  return self;
}
- (BOOL) hasFrameCount {
  return resultSwAnimation.hasFrameCount;
}
- (UInt32) frameCount {
  return resultSwAnimation.frameCount;
}
- (SwAnimationBuilder*) setFrameCount:(UInt32) value {
  resultSwAnimation.hasFrameCount = YES;
  resultSwAnimation.frameCount = value;
  return self;
}
- (SwAnimationBuilder*) clearFrameCount {
  resultSwAnimation.hasFrameCount = NO;
  resultSwAnimation.frameCount = 0;
  return self;
}
- (BOOL) hasTimeCount {
  return resultSwAnimation.hasTimeCount;
}
- (UInt32) timeCount {
  return resultSwAnimation.timeCount;
}
- (SwAnimationBuilder*) setTimeCount:(UInt32) value {
  resultSwAnimation.hasTimeCount = YES;
  resultSwAnimation.timeCount = value;
  return self;
}
- (SwAnimationBuilder*) clearTimeCount {
  resultSwAnimation.hasTimeCount = NO;
  resultSwAnimation.timeCount = 0;
  return self;
}
- (NSMutableArray *)frames {
  return resultSwAnimation.framesArray;
}
- (SwFrame*)framesAtIndex:(NSUInteger)index {
  return [resultSwAnimation framesAtIndex:index];
}
- (SwAnimationBuilder *)addFrames:(SwFrame*)value {
  if (resultSwAnimation.framesArray == nil) {
    resultSwAnimation.framesArray = [[NSMutableArray alloc]init];
  }
  [resultSwAnimation.framesArray addObject:value];
  return self;
}
- (SwAnimationBuilder *)setFramesArray:(NSArray *)array {
  resultSwAnimation.framesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (SwAnimationBuilder *)clearFrames {
  resultSwAnimation.framesArray = nil;
  return self;
}
- (NSMutableArray *)signRectangles {
  return resultSwAnimation.signRectanglesArray;
}
- (SignRectangle*)signRectanglesAtIndex:(NSUInteger)index {
  return [resultSwAnimation signRectanglesAtIndex:index];
}
- (SwAnimationBuilder *)addSignRectangles:(SignRectangle*)value {
  if (resultSwAnimation.signRectanglesArray == nil) {
    resultSwAnimation.signRectanglesArray = [[NSMutableArray alloc]init];
  }
  [resultSwAnimation.signRectanglesArray addObject:value];
  return self;
}
- (SwAnimationBuilder *)setSignRectanglesArray:(NSArray *)array {
  resultSwAnimation.signRectanglesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (SwAnimationBuilder *)clearSignRectangles {
  resultSwAnimation.signRectanglesArray = nil;
  return self;
}
- (NSMutableArray *)paras {
  return resultSwAnimation.parasArray;
}
- (Para*)parasAtIndex:(NSUInteger)index {
  return [resultSwAnimation parasAtIndex:index];
}
- (SwAnimationBuilder *)addParas:(Para*)value {
  if (resultSwAnimation.parasArray == nil) {
    resultSwAnimation.parasArray = [[NSMutableArray alloc]init];
  }
  [resultSwAnimation.parasArray addObject:value];
  return self;
}
- (SwAnimationBuilder *)setParasArray:(NSArray *)array {
  resultSwAnimation.parasArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (SwAnimationBuilder *)clearParas {
  resultSwAnimation.parasArray = nil;
  return self;
}
- (BOOL) hasWidth {
  return resultSwAnimation.hasWidth;
}
- (SInt32) width {
  return resultSwAnimation.width;
}
- (SwAnimationBuilder*) setWidth:(SInt32) value {
  resultSwAnimation.hasWidth = YES;
  resultSwAnimation.width = value;
  return self;
}
- (SwAnimationBuilder*) clearWidth {
  resultSwAnimation.hasWidth = NO;
  resultSwAnimation.width = 0;
  return self;
}
- (BOOL) hasHeight {
  return resultSwAnimation.hasHeight;
}
- (SInt32) height {
  return resultSwAnimation.height;
}
- (SwAnimationBuilder*) setHeight:(SInt32) value {
  resultSwAnimation.hasHeight = YES;
  resultSwAnimation.height = value;
  return self;
}
- (SwAnimationBuilder*) clearHeight {
  resultSwAnimation.hasHeight = NO;
  resultSwAnimation.height = 0;
  return self;
}
- (BOOL) hasScaleX {
  return resultSwAnimation.hasScaleX;
}
- (SInt32) scaleX {
  return resultSwAnimation.scaleX;
}
- (SwAnimationBuilder*) setScaleX:(SInt32) value {
  resultSwAnimation.hasScaleX = YES;
  resultSwAnimation.scaleX = value;
  return self;
}
- (SwAnimationBuilder*) clearScaleX {
  resultSwAnimation.hasScaleX = NO;
  resultSwAnimation.scaleX = 100;
  return self;
}
- (BOOL) hasScaleY {
  return resultSwAnimation.hasScaleY;
}
- (SInt32) scaleY {
  return resultSwAnimation.scaleY;
}
- (SwAnimationBuilder*) setScaleY:(SInt32) value {
  resultSwAnimation.hasScaleY = YES;
  resultSwAnimation.scaleY = value;
  return self;
}
- (SwAnimationBuilder*) clearScaleY {
  resultSwAnimation.hasScaleY = NO;
  resultSwAnimation.scaleY = 100;
  return self;
}
- (NSMutableArray *)compsiteAnimations {
  return resultSwAnimation.compsiteAnimationsArray;
}
- (SwCompsiteAnimation*)compsiteAnimationsAtIndex:(NSUInteger)index {
  return [resultSwAnimation compsiteAnimationsAtIndex:index];
}
- (SwAnimationBuilder *)addCompsiteAnimations:(SwCompsiteAnimation*)value {
  if (resultSwAnimation.compsiteAnimationsArray == nil) {
    resultSwAnimation.compsiteAnimationsArray = [[NSMutableArray alloc]init];
  }
  [resultSwAnimation.compsiteAnimationsArray addObject:value];
  return self;
}
- (SwAnimationBuilder *)setCompsiteAnimationsArray:(NSArray *)array {
  resultSwAnimation.compsiteAnimationsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (SwAnimationBuilder *)clearCompsiteAnimations {
  resultSwAnimation.compsiteAnimationsArray = nil;
  return self;
}
@end

@interface SwCompsiteAnimation ()
@property (strong) NSString* name;
@property (strong) NSString* targetRid;
@property (strong) NSString* targetDimension;
@property (strong) NSString* targetSignRectangleName;
@property SInt32 targetScaleX;
@property SInt32 targetScaleY;
@property (strong) NSString* sourceSignRectangleName;
@end

@implementation SwCompsiteAnimation

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasTargetRid {
  return !!hasTargetRid_;
}
- (void) setHasTargetRid:(BOOL) _value_ {
  hasTargetRid_ = !!_value_;
}
@synthesize targetRid;
- (BOOL) hasTargetDimension {
  return !!hasTargetDimension_;
}
- (void) setHasTargetDimension:(BOOL) _value_ {
  hasTargetDimension_ = !!_value_;
}
@synthesize targetDimension;
- (BOOL) hasTargetSignRectangleName {
  return !!hasTargetSignRectangleName_;
}
- (void) setHasTargetSignRectangleName:(BOOL) _value_ {
  hasTargetSignRectangleName_ = !!_value_;
}
@synthesize targetSignRectangleName;
- (BOOL) hasTargetScaleX {
  return !!hasTargetScaleX_;
}
- (void) setHasTargetScaleX:(BOOL) _value_ {
  hasTargetScaleX_ = !!_value_;
}
@synthesize targetScaleX;
- (BOOL) hasTargetScaleY {
  return !!hasTargetScaleY_;
}
- (void) setHasTargetScaleY:(BOOL) _value_ {
  hasTargetScaleY_ = !!_value_;
}
@synthesize targetScaleY;
- (BOOL) hasSourceSignRectangleName {
  return !!hasSourceSignRectangleName_;
}
- (void) setHasSourceSignRectangleName:(BOOL) _value_ {
  hasSourceSignRectangleName_ = !!_value_;
}
@synthesize sourceSignRectangleName;
- (instancetype) init {
  if ((self = [super init])) {
    self.name = @"";
    self.targetRid = @"";
    self.targetDimension = @"";
    self.targetSignRectangleName = @"";
    self.targetScaleX = 0;
    self.targetScaleY = 0;
    self.sourceSignRectangleName = @"";
  }
  return self;
}
static SwCompsiteAnimation* defaultSwCompsiteAnimationInstance = nil;
+ (void) initialize {
  if (self == [SwCompsiteAnimation class]) {
    defaultSwCompsiteAnimationInstance = [[SwCompsiteAnimation alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSwCompsiteAnimationInstance;
}
- (instancetype) defaultInstance {
  return defaultSwCompsiteAnimationInstance;
}
- (BOOL) isInitialized {
  if (!self.hasName) {
    return NO;
  }
  if (!self.hasTargetRid) {
    return NO;
  }
  if (!self.hasTargetDimension) {
    return NO;
  }
  if (!self.hasTargetSignRectangleName) {
    return NO;
  }
  if (!self.hasTargetScaleX) {
    return NO;
  }
  if (!self.hasTargetScaleY) {
    return NO;
  }
  if (!self.hasSourceSignRectangleName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasTargetRid) {
    [output writeString:2 value:self.targetRid];
  }
  if (self.hasTargetDimension) {
    [output writeString:3 value:self.targetDimension];
  }
  if (self.hasTargetSignRectangleName) {
    [output writeString:4 value:self.targetSignRectangleName];
  }
  if (self.hasTargetScaleX) {
    [output writeInt32:5 value:self.targetScaleX];
  }
  if (self.hasTargetScaleY) {
    [output writeInt32:6 value:self.targetScaleY];
  }
  if (self.hasSourceSignRectangleName) {
    [output writeString:7 value:self.sourceSignRectangleName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  if (self.hasTargetRid) {
    size_ += computeStringSize(2, self.targetRid);
  }
  if (self.hasTargetDimension) {
    size_ += computeStringSize(3, self.targetDimension);
  }
  if (self.hasTargetSignRectangleName) {
    size_ += computeStringSize(4, self.targetSignRectangleName);
  }
  if (self.hasTargetScaleX) {
    size_ += computeInt32Size(5, self.targetScaleX);
  }
  if (self.hasTargetScaleY) {
    size_ += computeInt32Size(6, self.targetScaleY);
  }
  if (self.hasSourceSignRectangleName) {
    size_ += computeStringSize(7, self.sourceSignRectangleName);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SwCompsiteAnimation*) parseFromData:(NSData*) data {
  return (SwCompsiteAnimation*)[[[SwCompsiteAnimation builder] mergeFromData:data] build];
}
+ (SwCompsiteAnimation*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SwCompsiteAnimation*)[[[SwCompsiteAnimation builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SwCompsiteAnimation*) parseFromInputStream:(NSInputStream*) input {
  return (SwCompsiteAnimation*)[[[SwCompsiteAnimation builder] mergeFromInputStream:input] build];
}
+ (SwCompsiteAnimation*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SwCompsiteAnimation*)[[[SwCompsiteAnimation builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SwCompsiteAnimation*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SwCompsiteAnimation*)[[[SwCompsiteAnimation builder] mergeFromCodedInputStream:input] build];
}
+ (SwCompsiteAnimation*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SwCompsiteAnimation*)[[[SwCompsiteAnimation builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SwCompsiteAnimationBuilder*) builder {
  return [[SwCompsiteAnimationBuilder alloc] init];
}
+ (SwCompsiteAnimationBuilder*) builderWithPrototype:(SwCompsiteAnimation*) prototype {
  return [[SwCompsiteAnimation builder] mergeFrom:prototype];
}
- (SwCompsiteAnimationBuilder*) builder {
  return [SwCompsiteAnimation builder];
}
- (SwCompsiteAnimationBuilder*) toBuilder {
  return [SwCompsiteAnimation builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasTargetRid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"targetRid", self.targetRid];
  }
  if (self.hasTargetDimension) {
    [output appendFormat:@"%@%@: %@\n", indent, @"targetDimension", self.targetDimension];
  }
  if (self.hasTargetSignRectangleName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"targetSignRectangleName", self.targetSignRectangleName];
  }
  if (self.hasTargetScaleX) {
    [output appendFormat:@"%@%@: %@\n", indent, @"targetScaleX", [NSNumber numberWithInteger:self.targetScaleX]];
  }
  if (self.hasTargetScaleY) {
    [output appendFormat:@"%@%@: %@\n", indent, @"targetScaleY", [NSNumber numberWithInteger:self.targetScaleY]];
  }
  if (self.hasSourceSignRectangleName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sourceSignRectangleName", self.sourceSignRectangleName];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasTargetRid) {
    [dictionary setObject: self.targetRid forKey: @"targetRid"];
  }
  if (self.hasTargetDimension) {
    [dictionary setObject: self.targetDimension forKey: @"targetDimension"];
  }
  if (self.hasTargetSignRectangleName) {
    [dictionary setObject: self.targetSignRectangleName forKey: @"targetSignRectangleName"];
  }
  if (self.hasTargetScaleX) {
    [dictionary setObject: [NSNumber numberWithInteger:self.targetScaleX] forKey: @"targetScaleX"];
  }
  if (self.hasTargetScaleY) {
    [dictionary setObject: [NSNumber numberWithInteger:self.targetScaleY] forKey: @"targetScaleY"];
  }
  if (self.hasSourceSignRectangleName) {
    [dictionary setObject: self.sourceSignRectangleName forKey: @"sourceSignRectangleName"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SwCompsiteAnimation class]]) {
    return NO;
  }
  SwCompsiteAnimation *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasTargetRid == otherMessage.hasTargetRid &&
      (!self.hasTargetRid || [self.targetRid isEqual:otherMessage.targetRid]) &&
      self.hasTargetDimension == otherMessage.hasTargetDimension &&
      (!self.hasTargetDimension || [self.targetDimension isEqual:otherMessage.targetDimension]) &&
      self.hasTargetSignRectangleName == otherMessage.hasTargetSignRectangleName &&
      (!self.hasTargetSignRectangleName || [self.targetSignRectangleName isEqual:otherMessage.targetSignRectangleName]) &&
      self.hasTargetScaleX == otherMessage.hasTargetScaleX &&
      (!self.hasTargetScaleX || self.targetScaleX == otherMessage.targetScaleX) &&
      self.hasTargetScaleY == otherMessage.hasTargetScaleY &&
      (!self.hasTargetScaleY || self.targetScaleY == otherMessage.targetScaleY) &&
      self.hasSourceSignRectangleName == otherMessage.hasSourceSignRectangleName &&
      (!self.hasSourceSignRectangleName || [self.sourceSignRectangleName isEqual:otherMessage.sourceSignRectangleName]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasTargetRid) {
    hashCode = hashCode * 31 + [self.targetRid hash];
  }
  if (self.hasTargetDimension) {
    hashCode = hashCode * 31 + [self.targetDimension hash];
  }
  if (self.hasTargetSignRectangleName) {
    hashCode = hashCode * 31 + [self.targetSignRectangleName hash];
  }
  if (self.hasTargetScaleX) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.targetScaleX] hash];
  }
  if (self.hasTargetScaleY) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.targetScaleY] hash];
  }
  if (self.hasSourceSignRectangleName) {
    hashCode = hashCode * 31 + [self.sourceSignRectangleName hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SwCompsiteAnimationBuilder()
@property (strong) SwCompsiteAnimation* resultSwCompsiteAnimation;
@end

@implementation SwCompsiteAnimationBuilder
@synthesize resultSwCompsiteAnimation;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSwCompsiteAnimation = [[SwCompsiteAnimation alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSwCompsiteAnimation;
}
- (SwCompsiteAnimationBuilder*) clear {
  self.resultSwCompsiteAnimation = [[SwCompsiteAnimation alloc] init];
  return self;
}
- (SwCompsiteAnimationBuilder*) clone {
  return [SwCompsiteAnimation builderWithPrototype:resultSwCompsiteAnimation];
}
- (SwCompsiteAnimation*) defaultInstance {
  return [SwCompsiteAnimation defaultInstance];
}
- (SwCompsiteAnimation*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SwCompsiteAnimation*) buildPartial {
  SwCompsiteAnimation* returnMe = resultSwCompsiteAnimation;
  self.resultSwCompsiteAnimation = nil;
  return returnMe;
}
- (SwCompsiteAnimationBuilder*) mergeFrom:(SwCompsiteAnimation*) other {
  if (other == [SwCompsiteAnimation defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasTargetRid) {
    [self setTargetRid:other.targetRid];
  }
  if (other.hasTargetDimension) {
    [self setTargetDimension:other.targetDimension];
  }
  if (other.hasTargetSignRectangleName) {
    [self setTargetSignRectangleName:other.targetSignRectangleName];
  }
  if (other.hasTargetScaleX) {
    [self setTargetScaleX:other.targetScaleX];
  }
  if (other.hasTargetScaleY) {
    [self setTargetScaleY:other.targetScaleY];
  }
  if (other.hasSourceSignRectangleName) {
    [self setSourceSignRectangleName:other.sourceSignRectangleName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SwCompsiteAnimationBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SwCompsiteAnimationBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 18: {
        [self setTargetRid:[input readString]];
        break;
      }
      case 26: {
        [self setTargetDimension:[input readString]];
        break;
      }
      case 34: {
        [self setTargetSignRectangleName:[input readString]];
        break;
      }
      case 40: {
        [self setTargetScaleX:[input readInt32]];
        break;
      }
      case 48: {
        [self setTargetScaleY:[input readInt32]];
        break;
      }
      case 58: {
        [self setSourceSignRectangleName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return resultSwCompsiteAnimation.hasName;
}
- (NSString*) name {
  return resultSwCompsiteAnimation.name;
}
- (SwCompsiteAnimationBuilder*) setName:(NSString*) value {
  resultSwCompsiteAnimation.hasName = YES;
  resultSwCompsiteAnimation.name = value;
  return self;
}
- (SwCompsiteAnimationBuilder*) clearName {
  resultSwCompsiteAnimation.hasName = NO;
  resultSwCompsiteAnimation.name = @"";
  return self;
}
- (BOOL) hasTargetRid {
  return resultSwCompsiteAnimation.hasTargetRid;
}
- (NSString*) targetRid {
  return resultSwCompsiteAnimation.targetRid;
}
- (SwCompsiteAnimationBuilder*) setTargetRid:(NSString*) value {
  resultSwCompsiteAnimation.hasTargetRid = YES;
  resultSwCompsiteAnimation.targetRid = value;
  return self;
}
- (SwCompsiteAnimationBuilder*) clearTargetRid {
  resultSwCompsiteAnimation.hasTargetRid = NO;
  resultSwCompsiteAnimation.targetRid = @"";
  return self;
}
- (BOOL) hasTargetDimension {
  return resultSwCompsiteAnimation.hasTargetDimension;
}
- (NSString*) targetDimension {
  return resultSwCompsiteAnimation.targetDimension;
}
- (SwCompsiteAnimationBuilder*) setTargetDimension:(NSString*) value {
  resultSwCompsiteAnimation.hasTargetDimension = YES;
  resultSwCompsiteAnimation.targetDimension = value;
  return self;
}
- (SwCompsiteAnimationBuilder*) clearTargetDimension {
  resultSwCompsiteAnimation.hasTargetDimension = NO;
  resultSwCompsiteAnimation.targetDimension = @"";
  return self;
}
- (BOOL) hasTargetSignRectangleName {
  return resultSwCompsiteAnimation.hasTargetSignRectangleName;
}
- (NSString*) targetSignRectangleName {
  return resultSwCompsiteAnimation.targetSignRectangleName;
}
- (SwCompsiteAnimationBuilder*) setTargetSignRectangleName:(NSString*) value {
  resultSwCompsiteAnimation.hasTargetSignRectangleName = YES;
  resultSwCompsiteAnimation.targetSignRectangleName = value;
  return self;
}
- (SwCompsiteAnimationBuilder*) clearTargetSignRectangleName {
  resultSwCompsiteAnimation.hasTargetSignRectangleName = NO;
  resultSwCompsiteAnimation.targetSignRectangleName = @"";
  return self;
}
- (BOOL) hasTargetScaleX {
  return resultSwCompsiteAnimation.hasTargetScaleX;
}
- (SInt32) targetScaleX {
  return resultSwCompsiteAnimation.targetScaleX;
}
- (SwCompsiteAnimationBuilder*) setTargetScaleX:(SInt32) value {
  resultSwCompsiteAnimation.hasTargetScaleX = YES;
  resultSwCompsiteAnimation.targetScaleX = value;
  return self;
}
- (SwCompsiteAnimationBuilder*) clearTargetScaleX {
  resultSwCompsiteAnimation.hasTargetScaleX = NO;
  resultSwCompsiteAnimation.targetScaleX = 0;
  return self;
}
- (BOOL) hasTargetScaleY {
  return resultSwCompsiteAnimation.hasTargetScaleY;
}
- (SInt32) targetScaleY {
  return resultSwCompsiteAnimation.targetScaleY;
}
- (SwCompsiteAnimationBuilder*) setTargetScaleY:(SInt32) value {
  resultSwCompsiteAnimation.hasTargetScaleY = YES;
  resultSwCompsiteAnimation.targetScaleY = value;
  return self;
}
- (SwCompsiteAnimationBuilder*) clearTargetScaleY {
  resultSwCompsiteAnimation.hasTargetScaleY = NO;
  resultSwCompsiteAnimation.targetScaleY = 0;
  return self;
}
- (BOOL) hasSourceSignRectangleName {
  return resultSwCompsiteAnimation.hasSourceSignRectangleName;
}
- (NSString*) sourceSignRectangleName {
  return resultSwCompsiteAnimation.sourceSignRectangleName;
}
- (SwCompsiteAnimationBuilder*) setSourceSignRectangleName:(NSString*) value {
  resultSwCompsiteAnimation.hasSourceSignRectangleName = YES;
  resultSwCompsiteAnimation.sourceSignRectangleName = value;
  return self;
}
- (SwCompsiteAnimationBuilder*) clearSourceSignRectangleName {
  resultSwCompsiteAnimation.hasSourceSignRectangleName = NO;
  resultSwCompsiteAnimation.sourceSignRectangleName = @"";
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
