// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "SignRectangle.pb.h"
// @@protoc_insertion_point(imports)

@implementation SignRectangleRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [SignRectangleRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface SignRectangle ()
@property (strong) NSString* name;
@property SInt32 x;
@property SInt32 y;
@property SInt32 width;
@property SInt32 height;
@end

@implementation SignRectangle

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasX {
  return !!hasX_;
}
- (void) setHasX:(BOOL) _value_ {
  hasX_ = !!_value_;
}
@synthesize x;
- (BOOL) hasY {
  return !!hasY_;
}
- (void) setHasY:(BOOL) _value_ {
  hasY_ = !!_value_;
}
@synthesize y;
- (BOOL) hasWidth {
  return !!hasWidth_;
}
- (void) setHasWidth:(BOOL) _value_ {
  hasWidth_ = !!_value_;
}
@synthesize width;
- (BOOL) hasHeight {
  return !!hasHeight_;
}
- (void) setHasHeight:(BOOL) _value_ {
  hasHeight_ = !!_value_;
}
@synthesize height;
- (instancetype) init {
  if ((self = [super init])) {
    self.name = @"";
    self.x = 0;
    self.y = 0;
    self.width = 0;
    self.height = 0;
  }
  return self;
}
static SignRectangle* defaultSignRectangleInstance = nil;
+ (void) initialize {
  if (self == [SignRectangle class]) {
    defaultSignRectangleInstance = [[SignRectangle alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSignRectangleInstance;
}
- (instancetype) defaultInstance {
  return defaultSignRectangleInstance;
}
- (BOOL) isInitialized {
  if (!self.hasName) {
    return NO;
  }
  if (!self.hasX) {
    return NO;
  }
  if (!self.hasY) {
    return NO;
  }
  if (!self.hasWidth) {
    return NO;
  }
  if (!self.hasHeight) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasX) {
    [output writeInt32:2 value:self.x];
  }
  if (self.hasY) {
    [output writeInt32:3 value:self.y];
  }
  if (self.hasWidth) {
    [output writeInt32:4 value:self.width];
  }
  if (self.hasHeight) {
    [output writeInt32:5 value:self.height];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  if (self.hasX) {
    size_ += computeInt32Size(2, self.x);
  }
  if (self.hasY) {
    size_ += computeInt32Size(3, self.y);
  }
  if (self.hasWidth) {
    size_ += computeInt32Size(4, self.width);
  }
  if (self.hasHeight) {
    size_ += computeInt32Size(5, self.height);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SignRectangle*) parseFromData:(NSData*) data {
  return (SignRectangle*)[[[SignRectangle builder] mergeFromData:data] build];
}
+ (SignRectangle*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SignRectangle*)[[[SignRectangle builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SignRectangle*) parseFromInputStream:(NSInputStream*) input {
  return (SignRectangle*)[[[SignRectangle builder] mergeFromInputStream:input] build];
}
+ (SignRectangle*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SignRectangle*)[[[SignRectangle builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SignRectangle*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SignRectangle*)[[[SignRectangle builder] mergeFromCodedInputStream:input] build];
}
+ (SignRectangle*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SignRectangle*)[[[SignRectangle builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SignRectangleBuilder*) builder {
  return [[SignRectangleBuilder alloc] init];
}
+ (SignRectangleBuilder*) builderWithPrototype:(SignRectangle*) prototype {
  return [[SignRectangle builder] mergeFrom:prototype];
}
- (SignRectangleBuilder*) builder {
  return [SignRectangle builder];
}
- (SignRectangleBuilder*) toBuilder {
  return [SignRectangle builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasX) {
    [output appendFormat:@"%@%@: %@\n", indent, @"x", [NSNumber numberWithInteger:self.x]];
  }
  if (self.hasY) {
    [output appendFormat:@"%@%@: %@\n", indent, @"y", [NSNumber numberWithInteger:self.y]];
  }
  if (self.hasWidth) {
    [output appendFormat:@"%@%@: %@\n", indent, @"width", [NSNumber numberWithInteger:self.width]];
  }
  if (self.hasHeight) {
    [output appendFormat:@"%@%@: %@\n", indent, @"height", [NSNumber numberWithInteger:self.height]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasX) {
    [dictionary setObject: [NSNumber numberWithInteger:self.x] forKey: @"x"];
  }
  if (self.hasY) {
    [dictionary setObject: [NSNumber numberWithInteger:self.y] forKey: @"y"];
  }
  if (self.hasWidth) {
    [dictionary setObject: [NSNumber numberWithInteger:self.width] forKey: @"width"];
  }
  if (self.hasHeight) {
    [dictionary setObject: [NSNumber numberWithInteger:self.height] forKey: @"height"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SignRectangle class]]) {
    return NO;
  }
  SignRectangle *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasX == otherMessage.hasX &&
      (!self.hasX || self.x == otherMessage.x) &&
      self.hasY == otherMessage.hasY &&
      (!self.hasY || self.y == otherMessage.y) &&
      self.hasWidth == otherMessage.hasWidth &&
      (!self.hasWidth || self.width == otherMessage.width) &&
      self.hasHeight == otherMessage.hasHeight &&
      (!self.hasHeight || self.height == otherMessage.height) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasX) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.x] hash];
  }
  if (self.hasY) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.y] hash];
  }
  if (self.hasWidth) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.width] hash];
  }
  if (self.hasHeight) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.height] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SignRectangleBuilder()
@property (strong) SignRectangle* resultSignRectangle;
@end

@implementation SignRectangleBuilder
@synthesize resultSignRectangle;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSignRectangle = [[SignRectangle alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSignRectangle;
}
- (SignRectangleBuilder*) clear {
  self.resultSignRectangle = [[SignRectangle alloc] init];
  return self;
}
- (SignRectangleBuilder*) clone {
  return [SignRectangle builderWithPrototype:resultSignRectangle];
}
- (SignRectangle*) defaultInstance {
  return [SignRectangle defaultInstance];
}
- (SignRectangle*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SignRectangle*) buildPartial {
  SignRectangle* returnMe = resultSignRectangle;
  self.resultSignRectangle = nil;
  return returnMe;
}
- (SignRectangleBuilder*) mergeFrom:(SignRectangle*) other {
  if (other == [SignRectangle defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasX) {
    [self setX:other.x];
  }
  if (other.hasY) {
    [self setY:other.y];
  }
  if (other.hasWidth) {
    [self setWidth:other.width];
  }
  if (other.hasHeight) {
    [self setHeight:other.height];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SignRectangleBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SignRectangleBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 16: {
        [self setX:[input readInt32]];
        break;
      }
      case 24: {
        [self setY:[input readInt32]];
        break;
      }
      case 32: {
        [self setWidth:[input readInt32]];
        break;
      }
      case 40: {
        [self setHeight:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return resultSignRectangle.hasName;
}
- (NSString*) name {
  return resultSignRectangle.name;
}
- (SignRectangleBuilder*) setName:(NSString*) value {
  resultSignRectangle.hasName = YES;
  resultSignRectangle.name = value;
  return self;
}
- (SignRectangleBuilder*) clearName {
  resultSignRectangle.hasName = NO;
  resultSignRectangle.name = @"";
  return self;
}
- (BOOL) hasX {
  return resultSignRectangle.hasX;
}
- (SInt32) x {
  return resultSignRectangle.x;
}
- (SignRectangleBuilder*) setX:(SInt32) value {
  resultSignRectangle.hasX = YES;
  resultSignRectangle.x = value;
  return self;
}
- (SignRectangleBuilder*) clearX {
  resultSignRectangle.hasX = NO;
  resultSignRectangle.x = 0;
  return self;
}
- (BOOL) hasY {
  return resultSignRectangle.hasY;
}
- (SInt32) y {
  return resultSignRectangle.y;
}
- (SignRectangleBuilder*) setY:(SInt32) value {
  resultSignRectangle.hasY = YES;
  resultSignRectangle.y = value;
  return self;
}
- (SignRectangleBuilder*) clearY {
  resultSignRectangle.hasY = NO;
  resultSignRectangle.y = 0;
  return self;
}
- (BOOL) hasWidth {
  return resultSignRectangle.hasWidth;
}
- (SInt32) width {
  return resultSignRectangle.width;
}
- (SignRectangleBuilder*) setWidth:(SInt32) value {
  resultSignRectangle.hasWidth = YES;
  resultSignRectangle.width = value;
  return self;
}
- (SignRectangleBuilder*) clearWidth {
  resultSignRectangle.hasWidth = NO;
  resultSignRectangle.width = 0;
  return self;
}
- (BOOL) hasHeight {
  return resultSignRectangle.hasHeight;
}
- (SInt32) height {
  return resultSignRectangle.height;
}
- (SignRectangleBuilder*) setHeight:(SInt32) value {
  resultSignRectangle.hasHeight = YES;
  resultSignRectangle.height = value;
  return self;
}
- (SignRectangleBuilder*) clearHeight {
  resultSignRectangle.hasHeight = NO;
  resultSignRectangle.height = 0;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
