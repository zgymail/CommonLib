// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "ResourceDataFile.pb.h"
// @@protoc_insertion_point(imports)

@implementation ResourceDataFileRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ResourceDataFileRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [SwDescRoot registerAllExtensions:registry];
    [ResourceByteRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface ResourceDataFile ()
@property (strong) SwDesc* desc;
@property (strong) NSMutableArray * bytesArray;
@property (strong) NSMutableArray * qualityArray;
@end

@implementation ResourceDataFile

- (BOOL) hasDesc {
  return !!hasDesc_;
}
- (void) setHasDesc:(BOOL) _value_ {
  hasDesc_ = !!_value_;
}
@synthesize desc;
@synthesize bytesArray;
@dynamic bytes;
@synthesize qualityArray;
@dynamic quality;
- (instancetype) init {
  if ((self = [super init])) {
    self.desc = [SwDesc defaultInstance];
  }
  return self;
}
static ResourceDataFile* defaultResourceDataFileInstance = nil;
+ (void) initialize {
  if (self == [ResourceDataFile class]) {
    defaultResourceDataFileInstance = [[ResourceDataFile alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultResourceDataFileInstance;
}
- (instancetype) defaultInstance {
  return defaultResourceDataFileInstance;
}
- (NSArray *)bytes {
  return bytesArray;
}
- (ResourceByte*)bytesAtIndex:(NSUInteger)index {
  return [bytesArray objectAtIndex:index];
}
- (NSArray *)quality {
  return qualityArray;
}
- (ResourceQuality*)qualityAtIndex:(NSUInteger)index {
  return [qualityArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasDesc) {
    return NO;
  }
  if (!self.desc.isInitialized) {
    return NO;
  }
  __block BOOL isInitbytes = YES;
   [self.bytes enumerateObjectsUsingBlock:^(ResourceByte *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitbytes = NO;
      *stop = YES;
    }
  }];
  if (!isInitbytes) return isInitbytes;
  __block BOOL isInitquality = YES;
   [self.quality enumerateObjectsUsingBlock:^(ResourceQuality *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitquality = NO;
      *stop = YES;
    }
  }];
  if (!isInitquality) return isInitquality;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDesc) {
    [output writeMessage:1 value:self.desc];
  }
  [self.bytesArray enumerateObjectsUsingBlock:^(ResourceByte *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.qualityArray enumerateObjectsUsingBlock:^(ResourceQuality *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasDesc) {
    size_ += computeMessageSize(1, self.desc);
  }
  [self.bytesArray enumerateObjectsUsingBlock:^(ResourceByte *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  [self.qualityArray enumerateObjectsUsingBlock:^(ResourceQuality *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ResourceDataFile*) parseFromData:(NSData*) data {
  return (ResourceDataFile*)[[[ResourceDataFile builder] mergeFromData:data] build];
}
+ (ResourceDataFile*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResourceDataFile*)[[[ResourceDataFile builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ResourceDataFile*) parseFromInputStream:(NSInputStream*) input {
  return (ResourceDataFile*)[[[ResourceDataFile builder] mergeFromInputStream:input] build];
}
+ (ResourceDataFile*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResourceDataFile*)[[[ResourceDataFile builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResourceDataFile*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ResourceDataFile*)[[[ResourceDataFile builder] mergeFromCodedInputStream:input] build];
}
+ (ResourceDataFile*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResourceDataFile*)[[[ResourceDataFile builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResourceDataFileBuilder*) builder {
  return [[ResourceDataFileBuilder alloc] init];
}
+ (ResourceDataFileBuilder*) builderWithPrototype:(ResourceDataFile*) prototype {
  return [[ResourceDataFile builder] mergeFrom:prototype];
}
- (ResourceDataFileBuilder*) builder {
  return [ResourceDataFile builder];
}
- (ResourceDataFileBuilder*) toBuilder {
  return [ResourceDataFile builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasDesc) {
    [output appendFormat:@"%@%@ {\n", indent, @"desc"];
    [self.desc writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.bytesArray enumerateObjectsUsingBlock:^(ResourceByte *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"bytes"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.qualityArray enumerateObjectsUsingBlock:^(ResourceQuality *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"quality"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasDesc) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.desc storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"desc"];
  }
  for (ResourceByte* element in self.bytesArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"bytes"];
  }
  for (ResourceQuality* element in self.qualityArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"quality"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ResourceDataFile class]]) {
    return NO;
  }
  ResourceDataFile *otherMessage = other;
  return
      self.hasDesc == otherMessage.hasDesc &&
      (!self.hasDesc || [self.desc isEqual:otherMessage.desc]) &&
      [self.bytesArray isEqualToArray:otherMessage.bytesArray] &&
      [self.qualityArray isEqualToArray:otherMessage.qualityArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasDesc) {
    hashCode = hashCode * 31 + [self.desc hash];
  }
  [self.bytesArray enumerateObjectsUsingBlock:^(ResourceByte *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.qualityArray enumerateObjectsUsingBlock:^(ResourceQuality *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ResourceDataFileBuilder()
@property (strong) ResourceDataFile* resultResourceDataFile;
@end

@implementation ResourceDataFileBuilder
@synthesize resultResourceDataFile;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultResourceDataFile = [[ResourceDataFile alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultResourceDataFile;
}
- (ResourceDataFileBuilder*) clear {
  self.resultResourceDataFile = [[ResourceDataFile alloc] init];
  return self;
}
- (ResourceDataFileBuilder*) clone {
  return [ResourceDataFile builderWithPrototype:resultResourceDataFile];
}
- (ResourceDataFile*) defaultInstance {
  return [ResourceDataFile defaultInstance];
}
- (ResourceDataFile*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ResourceDataFile*) buildPartial {
  ResourceDataFile* returnMe = resultResourceDataFile;
  self.resultResourceDataFile = nil;
  return returnMe;
}
- (ResourceDataFileBuilder*) mergeFrom:(ResourceDataFile*) other {
  if (other == [ResourceDataFile defaultInstance]) {
    return self;
  }
  if (other.hasDesc) {
    [self mergeDesc:other.desc];
  }
  if (other.bytesArray.count > 0) {
    if (resultResourceDataFile.bytesArray == nil) {
      resultResourceDataFile.bytesArray = [[NSMutableArray alloc] initWithArray:other.bytesArray];
    } else {
      [resultResourceDataFile.bytesArray addObjectsFromArray:other.bytesArray];
    }
  }
  if (other.qualityArray.count > 0) {
    if (resultResourceDataFile.qualityArray == nil) {
      resultResourceDataFile.qualityArray = [[NSMutableArray alloc] initWithArray:other.qualityArray];
    } else {
      [resultResourceDataFile.qualityArray addObjectsFromArray:other.qualityArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ResourceDataFileBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ResourceDataFileBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        SwDescBuilder* subBuilder = [SwDesc builder];
        if (self.hasDesc) {
          [subBuilder mergeFrom:self.desc];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDesc:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        ResourceByteBuilder* subBuilder = [ResourceByte builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBytes:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        ResourceQualityBuilder* subBuilder = [ResourceQuality builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addQuality:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasDesc {
  return resultResourceDataFile.hasDesc;
}
- (SwDesc*) desc {
  return resultResourceDataFile.desc;
}
- (ResourceDataFileBuilder*) setDesc:(SwDesc*) value {
  resultResourceDataFile.hasDesc = YES;
  resultResourceDataFile.desc = value;
  return self;
}
- (ResourceDataFileBuilder*) setDescBuilder:(SwDescBuilder*) builderForValue {
  return [self setDesc:[builderForValue build]];
}
- (ResourceDataFileBuilder*) mergeDesc:(SwDesc*) value {
  if (resultResourceDataFile.hasDesc &&
      resultResourceDataFile.desc != [SwDesc defaultInstance]) {
    resultResourceDataFile.desc =
      [[[SwDesc builderWithPrototype:resultResourceDataFile.desc] mergeFrom:value] buildPartial];
  } else {
    resultResourceDataFile.desc = value;
  }
  resultResourceDataFile.hasDesc = YES;
  return self;
}
- (ResourceDataFileBuilder*) clearDesc {
  resultResourceDataFile.hasDesc = NO;
  resultResourceDataFile.desc = [SwDesc defaultInstance];
  return self;
}
- (NSMutableArray *)bytes {
  return resultResourceDataFile.bytesArray;
}
- (ResourceByte*)bytesAtIndex:(NSUInteger)index {
  return [resultResourceDataFile bytesAtIndex:index];
}
- (ResourceDataFileBuilder *)addBytes:(ResourceByte*)value {
  if (resultResourceDataFile.bytesArray == nil) {
    resultResourceDataFile.bytesArray = [[NSMutableArray alloc]init];
  }
  [resultResourceDataFile.bytesArray addObject:value];
  return self;
}
- (ResourceDataFileBuilder *)setBytesArray:(NSArray *)array {
  resultResourceDataFile.bytesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ResourceDataFileBuilder *)clearBytes {
  resultResourceDataFile.bytesArray = nil;
  return self;
}
- (NSMutableArray *)quality {
  return resultResourceDataFile.qualityArray;
}
- (ResourceQuality*)qualityAtIndex:(NSUInteger)index {
  return [resultResourceDataFile qualityAtIndex:index];
}
- (ResourceDataFileBuilder *)addQuality:(ResourceQuality*)value {
  if (resultResourceDataFile.qualityArray == nil) {
    resultResourceDataFile.qualityArray = [[NSMutableArray alloc]init];
  }
  [resultResourceDataFile.qualityArray addObject:value];
  return self;
}
- (ResourceDataFileBuilder *)setQualityArray:(NSArray *)array {
  resultResourceDataFile.qualityArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ResourceDataFileBuilder *)clearQuality {
  resultResourceDataFile.qualityArray = nil;
  return self;
}
@end

@interface ResourceQuality ()
@property (strong) NSString* name;
@property SInt32 value;
@end

@implementation ResourceQuality

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) _value_ {
  hasValue_ = !!_value_;
}
@synthesize value;
- (instancetype) init {
  if ((self = [super init])) {
    self.name = @"";
    self.value = 0;
  }
  return self;
}
static ResourceQuality* defaultResourceQualityInstance = nil;
+ (void) initialize {
  if (self == [ResourceQuality class]) {
    defaultResourceQualityInstance = [[ResourceQuality alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultResourceQualityInstance;
}
- (instancetype) defaultInstance {
  return defaultResourceQualityInstance;
}
- (BOOL) isInitialized {
  if (!self.hasName) {
    return NO;
  }
  if (!self.hasValue) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasValue) {
    [output writeInt32:2 value:self.value];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  if (self.hasValue) {
    size_ += computeInt32Size(2, self.value);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ResourceQuality*) parseFromData:(NSData*) data {
  return (ResourceQuality*)[[[ResourceQuality builder] mergeFromData:data] build];
}
+ (ResourceQuality*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResourceQuality*)[[[ResourceQuality builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ResourceQuality*) parseFromInputStream:(NSInputStream*) input {
  return (ResourceQuality*)[[[ResourceQuality builder] mergeFromInputStream:input] build];
}
+ (ResourceQuality*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResourceQuality*)[[[ResourceQuality builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResourceQuality*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ResourceQuality*)[[[ResourceQuality builder] mergeFromCodedInputStream:input] build];
}
+ (ResourceQuality*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResourceQuality*)[[[ResourceQuality builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResourceQualityBuilder*) builder {
  return [[ResourceQualityBuilder alloc] init];
}
+ (ResourceQualityBuilder*) builderWithPrototype:(ResourceQuality*) prototype {
  return [[ResourceQuality builder] mergeFrom:prototype];
}
- (ResourceQualityBuilder*) builder {
  return [ResourceQuality builder];
}
- (ResourceQualityBuilder*) toBuilder {
  return [ResourceQuality builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"value", [NSNumber numberWithInteger:self.value]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasValue) {
    [dictionary setObject: [NSNumber numberWithInteger:self.value] forKey: @"value"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ResourceQuality class]]) {
    return NO;
  }
  ResourceQuality *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasValue == otherMessage.hasValue &&
      (!self.hasValue || self.value == otherMessage.value) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.value] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ResourceQualityBuilder()
@property (strong) ResourceQuality* resultResourceQuality;
@end

@implementation ResourceQualityBuilder
@synthesize resultResourceQuality;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultResourceQuality = [[ResourceQuality alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultResourceQuality;
}
- (ResourceQualityBuilder*) clear {
  self.resultResourceQuality = [[ResourceQuality alloc] init];
  return self;
}
- (ResourceQualityBuilder*) clone {
  return [ResourceQuality builderWithPrototype:resultResourceQuality];
}
- (ResourceQuality*) defaultInstance {
  return [ResourceQuality defaultInstance];
}
- (ResourceQuality*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ResourceQuality*) buildPartial {
  ResourceQuality* returnMe = resultResourceQuality;
  self.resultResourceQuality = nil;
  return returnMe;
}
- (ResourceQualityBuilder*) mergeFrom:(ResourceQuality*) other {
  if (other == [ResourceQuality defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ResourceQualityBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ResourceQualityBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 16: {
        [self setValue:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return resultResourceQuality.hasName;
}
- (NSString*) name {
  return resultResourceQuality.name;
}
- (ResourceQualityBuilder*) setName:(NSString*) value {
  resultResourceQuality.hasName = YES;
  resultResourceQuality.name = value;
  return self;
}
- (ResourceQualityBuilder*) clearName {
  resultResourceQuality.hasName = NO;
  resultResourceQuality.name = @"";
  return self;
}
- (BOOL) hasValue {
  return resultResourceQuality.hasValue;
}
- (SInt32) value {
  return resultResourceQuality.value;
}
- (ResourceQualityBuilder*) setValue:(SInt32) value {
  resultResourceQuality.hasValue = YES;
  resultResourceQuality.value = value;
  return self;
}
- (ResourceQualityBuilder*) clearValue {
  resultResourceQuality.hasValue = NO;
  resultResourceQuality.value = 0;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
