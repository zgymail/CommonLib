// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "SwFrame.pb.h"
// @@protoc_insertion_point(imports)

@implementation SwFrameRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [SwFrameRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface SwFrame ()
@property SInt32 v;
@property SInt32 x;
@property SInt32 y;
@property SInt32 t;
@property (strong) PBAppendableArray * mlistArray;
@end

@implementation SwFrame

- (BOOL) hasV {
  return !!hasV_;
}
- (void) setHasV:(BOOL) _value_ {
  hasV_ = !!_value_;
}
@synthesize v;
- (BOOL) hasX {
  return !!hasX_;
}
- (void) setHasX:(BOOL) _value_ {
  hasX_ = !!_value_;
}
@synthesize x;
- (BOOL) hasY {
  return !!hasY_;
}
- (void) setHasY:(BOOL) _value_ {
  hasY_ = !!_value_;
}
@synthesize y;
- (BOOL) hasT {
  return !!hasT_;
}
- (void) setHasT:(BOOL) _value_ {
  hasT_ = !!_value_;
}
@synthesize t;
@synthesize mlistArray;
@dynamic mlist;
- (instancetype) init {
  if ((self = [super init])) {
    self.v = 0;
    self.x = 0;
    self.y = 0;
    self.t = 0;
  }
  return self;
}
static SwFrame* defaultSwFrameInstance = nil;
+ (void) initialize {
  if (self == [SwFrame class]) {
    defaultSwFrameInstance = [[SwFrame alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSwFrameInstance;
}
- (instancetype) defaultInstance {
  return defaultSwFrameInstance;
}
- (PBArray *)mlist {
  return mlistArray;
}
- (SInt32)mlistAtIndex:(NSUInteger)index {
  return [mlistArray int32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasV) {
    [output writeInt32:1 value:self.v];
  }
  if (self.hasX) {
    [output writeInt32:2 value:self.x];
  }
  if (self.hasY) {
    [output writeInt32:3 value:self.y];
  }
  if (self.hasT) {
    [output writeInt32:4 value:self.t];
  }
  const NSUInteger mlistArrayCount = self.mlistArray.count;
  if (mlistArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.mlistArray.data;
    for (NSUInteger i = 0; i < mlistArrayCount; ++i) {
      [output writeInt32:5 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasV) {
    size_ += computeInt32Size(1, self.v);
  }
  if (self.hasX) {
    size_ += computeInt32Size(2, self.x);
  }
  if (self.hasY) {
    size_ += computeInt32Size(3, self.y);
  }
  if (self.hasT) {
    size_ += computeInt32Size(4, self.t);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.mlistArray.count;
    const SInt32 *values = (const SInt32 *)self.mlistArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SwFrame*) parseFromData:(NSData*) data {
  return (SwFrame*)[[[SwFrame builder] mergeFromData:data] build];
}
+ (SwFrame*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SwFrame*)[[[SwFrame builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SwFrame*) parseFromInputStream:(NSInputStream*) input {
  return (SwFrame*)[[[SwFrame builder] mergeFromInputStream:input] build];
}
+ (SwFrame*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SwFrame*)[[[SwFrame builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SwFrame*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SwFrame*)[[[SwFrame builder] mergeFromCodedInputStream:input] build];
}
+ (SwFrame*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SwFrame*)[[[SwFrame builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SwFrameBuilder*) builder {
  return [[SwFrameBuilder alloc] init];
}
+ (SwFrameBuilder*) builderWithPrototype:(SwFrame*) prototype {
  return [[SwFrame builder] mergeFrom:prototype];
}
- (SwFrameBuilder*) builder {
  return [SwFrame builder];
}
- (SwFrameBuilder*) toBuilder {
  return [SwFrame builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasV) {
    [output appendFormat:@"%@%@: %@\n", indent, @"v", [NSNumber numberWithInteger:self.v]];
  }
  if (self.hasX) {
    [output appendFormat:@"%@%@: %@\n", indent, @"x", [NSNumber numberWithInteger:self.x]];
  }
  if (self.hasY) {
    [output appendFormat:@"%@%@: %@\n", indent, @"y", [NSNumber numberWithInteger:self.y]];
  }
  if (self.hasT) {
    [output appendFormat:@"%@%@: %@\n", indent, @"t", [NSNumber numberWithInteger:self.t]];
  }
  [self.mlistArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mlist", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasV) {
    [dictionary setObject: [NSNumber numberWithInteger:self.v] forKey: @"v"];
  }
  if (self.hasX) {
    [dictionary setObject: [NSNumber numberWithInteger:self.x] forKey: @"x"];
  }
  if (self.hasY) {
    [dictionary setObject: [NSNumber numberWithInteger:self.y] forKey: @"y"];
  }
  if (self.hasT) {
    [dictionary setObject: [NSNumber numberWithInteger:self.t] forKey: @"t"];
  }
  NSMutableArray * mlistArrayArray = [NSMutableArray new];
  NSUInteger mlistArrayCount=self.mlistArray.count;
  for(int i=0;i<mlistArrayCount;i++){
    [mlistArrayArray addObject: @([self.mlistArray int32AtIndex:i])];
  }
  [dictionary setObject: mlistArrayArray forKey: @"mlist"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SwFrame class]]) {
    return NO;
  }
  SwFrame *otherMessage = other;
  return
      self.hasV == otherMessage.hasV &&
      (!self.hasV || self.v == otherMessage.v) &&
      self.hasX == otherMessage.hasX &&
      (!self.hasX || self.x == otherMessage.x) &&
      self.hasY == otherMessage.hasY &&
      (!self.hasY || self.y == otherMessage.y) &&
      self.hasT == otherMessage.hasT &&
      (!self.hasT || self.t == otherMessage.t) &&
      [self.mlistArray isEqualToArray:otherMessage.mlistArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasV) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.v] hash];
  }
  if (self.hasX) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.x] hash];
  }
  if (self.hasY) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.y] hash];
  }
  if (self.hasT) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.t] hash];
  }
  [self.mlistArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SwFrameBuilder()
@property (strong) SwFrame* resultSwFrame;
@end

@implementation SwFrameBuilder
@synthesize resultSwFrame;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSwFrame = [[SwFrame alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSwFrame;
}
- (SwFrameBuilder*) clear {
  self.resultSwFrame = [[SwFrame alloc] init];
  return self;
}
- (SwFrameBuilder*) clone {
  return [SwFrame builderWithPrototype:resultSwFrame];
}
- (SwFrame*) defaultInstance {
  return [SwFrame defaultInstance];
}
- (SwFrame*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SwFrame*) buildPartial {
  SwFrame* returnMe = resultSwFrame;
  self.resultSwFrame = nil;
  return returnMe;
}
- (SwFrameBuilder*) mergeFrom:(SwFrame*) other {
  if (other == [SwFrame defaultInstance]) {
    return self;
  }
  if (other.hasV) {
    [self setV:other.v];
  }
  if (other.hasX) {
    [self setX:other.x];
  }
  if (other.hasY) {
    [self setY:other.y];
  }
  if (other.hasT) {
    [self setT:other.t];
  }
  if (other.mlistArray.count > 0) {
    if (resultSwFrame.mlistArray == nil) {
      resultSwFrame.mlistArray = [other.mlistArray copy];
    } else {
      [resultSwFrame.mlistArray appendArray:other.mlistArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SwFrameBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SwFrameBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setV:[input readInt32]];
        break;
      }
      case 16: {
        [self setX:[input readInt32]];
        break;
      }
      case 24: {
        [self setY:[input readInt32]];
        break;
      }
      case 32: {
        [self setT:[input readInt32]];
        break;
      }
      case 40: {
        [self addMlist:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasV {
  return resultSwFrame.hasV;
}
- (SInt32) v {
  return resultSwFrame.v;
}
- (SwFrameBuilder*) setV:(SInt32) value {
  resultSwFrame.hasV = YES;
  resultSwFrame.v = value;
  return self;
}
- (SwFrameBuilder*) clearV {
  resultSwFrame.hasV = NO;
  resultSwFrame.v = 0;
  return self;
}
- (BOOL) hasX {
  return resultSwFrame.hasX;
}
- (SInt32) x {
  return resultSwFrame.x;
}
- (SwFrameBuilder*) setX:(SInt32) value {
  resultSwFrame.hasX = YES;
  resultSwFrame.x = value;
  return self;
}
- (SwFrameBuilder*) clearX {
  resultSwFrame.hasX = NO;
  resultSwFrame.x = 0;
  return self;
}
- (BOOL) hasY {
  return resultSwFrame.hasY;
}
- (SInt32) y {
  return resultSwFrame.y;
}
- (SwFrameBuilder*) setY:(SInt32) value {
  resultSwFrame.hasY = YES;
  resultSwFrame.y = value;
  return self;
}
- (SwFrameBuilder*) clearY {
  resultSwFrame.hasY = NO;
  resultSwFrame.y = 0;
  return self;
}
- (BOOL) hasT {
  return resultSwFrame.hasT;
}
- (SInt32) t {
  return resultSwFrame.t;
}
- (SwFrameBuilder*) setT:(SInt32) value {
  resultSwFrame.hasT = YES;
  resultSwFrame.t = value;
  return self;
}
- (SwFrameBuilder*) clearT {
  resultSwFrame.hasT = NO;
  resultSwFrame.t = 0;
  return self;
}
- (PBAppendableArray *)mlist {
  return resultSwFrame.mlistArray;
}
- (SInt32)mlistAtIndex:(NSUInteger)index {
  return [resultSwFrame mlistAtIndex:index];
}
- (SwFrameBuilder *)addMlist:(SInt32)value {
  if (resultSwFrame.mlistArray == nil) {
    resultSwFrame.mlistArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultSwFrame.mlistArray addInt32:value];
  return self;
}
- (SwFrameBuilder *)setMlistArray:(NSArray *)array {
  resultSwFrame.mlistArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (SwFrameBuilder *)setMlistValues:(const SInt32 *)values count:(NSUInteger)count {
  resultSwFrame.mlistArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (SwFrameBuilder *)clearMlist {
  resultSwFrame.mlistArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
