// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Config.pb.h"
// @@protoc_insertion_point(imports)

@implementation ConfigRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ConfigRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ConfigItemRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface Config ()
@property (strong) NSMutableArray * itemsArray;
@end

@implementation Config

@synthesize itemsArray;
@dynamic items;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static Config* defaultConfigInstance = nil;
+ (void) initialize {
  if (self == [Config class]) {
    defaultConfigInstance = [[Config alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultConfigInstance;
}
- (instancetype) defaultInstance {
  return defaultConfigInstance;
}
- (NSArray *)items {
  return itemsArray;
}
- (ConfigItem*)itemsAtIndex:(NSUInteger)index {
  return [itemsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInititems = YES;
   [self.items enumerateObjectsUsingBlock:^(ConfigItem *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInititems = NO;
      *stop = YES;
    }
  }];
  if (!isInititems) return isInititems;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.itemsArray enumerateObjectsUsingBlock:^(ConfigItem *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.itemsArray enumerateObjectsUsingBlock:^(ConfigItem *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Config*) parseFromData:(NSData*) data {
  return (Config*)[[[Config builder] mergeFromData:data] build];
}
+ (Config*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Config*)[[[Config builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Config*) parseFromInputStream:(NSInputStream*) input {
  return (Config*)[[[Config builder] mergeFromInputStream:input] build];
}
+ (Config*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Config*)[[[Config builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Config*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Config*)[[[Config builder] mergeFromCodedInputStream:input] build];
}
+ (Config*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Config*)[[[Config builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ConfigBuilder*) builder {
  return [[ConfigBuilder alloc] init];
}
+ (ConfigBuilder*) builderWithPrototype:(Config*) prototype {
  return [[Config builder] mergeFrom:prototype];
}
- (ConfigBuilder*) builder {
  return [Config builder];
}
- (ConfigBuilder*) toBuilder {
  return [Config builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.itemsArray enumerateObjectsUsingBlock:^(ConfigItem *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"items"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (ConfigItem* element in self.itemsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"items"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Config class]]) {
    return NO;
  }
  Config *otherMessage = other;
  return
      [self.itemsArray isEqualToArray:otherMessage.itemsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.itemsArray enumerateObjectsUsingBlock:^(ConfigItem *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ConfigBuilder()
@property (strong) Config* resultConfig;
@end

@implementation ConfigBuilder
@synthesize resultConfig;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultConfig = [[Config alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultConfig;
}
- (ConfigBuilder*) clear {
  self.resultConfig = [[Config alloc] init];
  return self;
}
- (ConfigBuilder*) clone {
  return [Config builderWithPrototype:resultConfig];
}
- (Config*) defaultInstance {
  return [Config defaultInstance];
}
- (Config*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Config*) buildPartial {
  Config* returnMe = resultConfig;
  self.resultConfig = nil;
  return returnMe;
}
- (ConfigBuilder*) mergeFrom:(Config*) other {
  if (other == [Config defaultInstance]) {
    return self;
  }
  if (other.itemsArray.count > 0) {
    if (resultConfig.itemsArray == nil) {
      resultConfig.itemsArray = [[NSMutableArray alloc] initWithArray:other.itemsArray];
    } else {
      [resultConfig.itemsArray addObjectsFromArray:other.itemsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ConfigBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ConfigBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        ConfigItemBuilder* subBuilder = [ConfigItem builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addItems:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)items {
  return resultConfig.itemsArray;
}
- (ConfigItem*)itemsAtIndex:(NSUInteger)index {
  return [resultConfig itemsAtIndex:index];
}
- (ConfigBuilder *)addItems:(ConfigItem*)value {
  if (resultConfig.itemsArray == nil) {
    resultConfig.itemsArray = [[NSMutableArray alloc]init];
  }
  [resultConfig.itemsArray addObject:value];
  return self;
}
- (ConfigBuilder *)setItemsArray:(NSArray *)array {
  resultConfig.itemsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ConfigBuilder *)clearItems {
  resultConfig.itemsArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
